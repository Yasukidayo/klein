<Window x:Class="LivetApp1.Views.EditUser"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        ResizeMode="NoResize"
        Title="ユーザ変更" Height="250" Width="325">
    
    <Window.DataContext>
        <vm:EditUserViewModel/>
    </Window.DataContext>
    
     <i:Interaction.Triggers>
     
     	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!-- EditUserViewModel からの TransitionMessage("Edited") を受け取とってログオン画面を閉じる処理。 -->
        <l:InteractionMessageTrigger MessageKey="Edited" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>
    <Grid>

        <TextBlock Grid.Column="0"  FontSize="30" VerticalAlignment="Bottom" Background="#AFEEEE" Height="224" Margin="140,-3,-34,-2" RenderTransformOrigin="0.5,0.5">
            <TextBlock.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform AngleX="14.503"/>
                    <RotateTransform/>
                    <TranslateTransform X="21.242"/>
                </TransformGroup>
            </TextBlock.RenderTransform>
        </TextBlock>

        <TextBlock Grid.Column="0" Text="" FontWeight="Bold" Foreground="White" FontSize="20" Background="#FFB6C1" Margin="-84,-1,177,1" RenderTransformOrigin="0.5,0.5">
            <TextBlock.RenderTransform>

                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform AngleX="14.472"/>
                    <RotateTransform/>
                    <TranslateTransform X="30.742"/>
                </TransformGroup>
            </TextBlock.RenderTransform>
        </TextBlock>

        <StackPanel>

            <Canvas>
                <Button Content="戻る" Click="Button1" Height="20" Width="100"  Canvas.Left="10" />

                <TextBlock Text="名前"  Canvas.Left="50" Canvas.Top="50"/>
                <TextBox Text="{Binding User.Name}"  Width="150" Canvas.Left="110" Canvas.Top="50"/>
                <TextBlock Text="Password" Canvas.Left="50" Canvas.Top="70"/>
                <TextBox Text="{Binding User.Password}" Width="150" Canvas.Left="110" Canvas.Top="70"/>
                <TextBlock Text="管理者権限" Canvas.Left="50" Canvas.Top="90"/>
                <CheckBox IsChecked="{Binding User.IsAdmin}" Canvas.Left="110" Canvas.Top="90"/>
                <TextBlock Text="所属部署" Canvas.Left="50" Canvas.Top="110"/>
                <ComboBox SelectedItem="{Binding User.Department}" ItemsSource="{Binding Departments}"
                          DisplayMemberPath="Name" SelectedValue="{Binding User.DepartmentId}" SelectedValuePath="Id"
                          FontSize="10" Height="18" Width="150" Canvas.Left="111" Canvas.Top="110"/>
                <Button Content="変更" Command="{Binding SubmitCommand}"  Width="120" Height="40" Canvas.Left="115" Canvas.Top="160"/>
            </Canvas>
        </StackPanel>
    </Grid>
</Window>