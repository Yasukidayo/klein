<Window x:Class="LivetApp1.Views.Home2"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        Title="管理者ホーム" Height="350" Width="525">

    <Window.DataContext>
        <vm:Home2ViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="ShowJirei" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="Showgyoumukaizen" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowTourokugamen" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowSanshou" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowLogon2" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowAddDep" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="ShowSoushin" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>


    </i:Interaction.Triggers>

    <Grid>

        <TextBlock Grid.Column="0"  FontSize="30" VerticalAlignment="Bottom" Background="#AFEEEE" Height="324" Margin="224,-2,-84,-3" RenderTransformOrigin="0.5,0.5" Grid.RowSpan="2">
            <TextBlock.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform AngleX="14.503"/>
                    <RotateTransform/>
                    <TranslateTransform X="21.242"/>
                </TransformGroup>
            </TextBlock.RenderTransform>
        </TextBlock>

        <TextBlock Grid.Column="0" Text="" FontWeight="Bold" Foreground="White" FontSize="20" Background="#FFB6C1" Margin="-80,-1,272,-3" RenderTransformOrigin="0.5,0.5" Grid.RowSpan="2">
            <TextBlock.RenderTransform>

                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform AngleX="14.472"/>
                    <RotateTransform/>
                    <TranslateTransform X="30.742"/>
                </TransformGroup>
            </TextBlock.RenderTransform>
        </TextBlock>

        <StackPanel >
            <TextBlock Text="このページは管理者画面のホームです。" />
        </StackPanel>
        <Button Content="送信" Command="{Binding ShowSoushinCommand}" HorizontalAlignment="Left" Margin="245,145,0,0" VerticalAlignment="Top" Width="157" RenderTransformOrigin="-0.081,0.304" Height="50"/>
        <Button Content="業務改善" Command="{Binding ShowgyoumukaizenCommand}" HorizontalAlignment="Left" Margin="90,95,0,0" VerticalAlignment="Top" Width="157" RenderTransformOrigin="-0.081,0.304" Height="50"/>
        <Button Content="代表事例" Command="{Binding ShowJireiCommand}" HorizontalAlignment="Left" Margin="245,95,0,0" VerticalAlignment="Top" Width="156" RenderTransformOrigin="0.162,0" Height="50"/>
        <Button Content="ユーザ追加" Command="{Binding ShowTourokugamenCommand}" HorizontalAlignment="Left" Margin="89,195,0,0" VerticalAlignment="Top" Width="156" Height="50"/>
        <Button Content="部課追加" Command="{Binding ShowAddDepCommand}" HorizontalAlignment="Left" Margin="245,195,0,0" VerticalAlignment="Top" Width="157" RenderTransformOrigin="-0.081,0.304" Height="50"/>
        <Button Content="参照" Command="{Binding ShowSanshouCommand}" HorizontalAlignment="Left" Margin="89,145,0,0" VerticalAlignment="Top" Width="156" Height="50" Click="Button_Click"/>
        <Button Content="ログアウト"  Click="Button1" Margin="392.969,10,0,0" VerticalAlignment="Top" Width="100.758" Height="29.051"/>
    </Grid>
</Window>
