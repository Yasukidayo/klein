<Window x:Class="LivetApp1.Views.Sanshou"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:LivetApp1.Views"
        xmlns:vm="clr-namespace:LivetApp1.ViewModels"
        ResizeMode="NoResize"
        Title="社員参照" Height="410" Width="425">

    <Window.DataContext>
        <vm:SanshouViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <!-- MainWindowViewModel からの TransitionMessage("DepartmentEdit") を受け取とって編集画面を表示する処理。 -->
        <l:InteractionMessageTrigger MessageKey="DepartmentEdit" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction/>
        </l:InteractionMessageTrigger>

        <l:InteractionMessageTrigger MessageKey="UserEdit" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <Grid>
        <StackPanel Margin="0,0,9,0">



            <Canvas>
                <Button Content="戻る" Click="Button1" Height="20" Width="100"  Canvas.Left="10" />
                <TextBlock Text="ユーザ" FontSize="15" Canvas.Left="170" Canvas.Top="15"/>
                <DataGrid ItemsSource="{Binding User}"  IsReadOnly="True" Height="150" Width="400"  AutoGenerateColumns="False"
                      CanUserAddRows="False" Canvas.Left="5" Canvas.Top="35"  LoadingRow="DataGrid_LoadingRow"  >
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Id" Binding="{Binding Id}" />
                        <DataGridTextColumn Header="名前" Binding="{Binding Name}" Width="100"/>
                        <DataGridTextColumn Header="パスワード" Binding="{Binding Password}" Width="100"/>
                        <DataGridTextColumn Header="部署" Binding="{Binding Department.Name}" Width="60"/>
                        <DataGridTextColumn Header="権限" Binding="{Binding IsAdmin}" />
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <!-- CommandParameter に {Binding} とだけ記述すると、UserMstViewModel.Users の要素、つまり User モデルを指定したことになる。-->
                                    <Button Content="編集" Command="{Binding DataContext.UserEditCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Content="削除" Foreground="#FFFFFF" Background="#FF0000" Command="{Binding DataContext.UserDeleteCommand, 
                                        RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

                <!-- ユーザ一覧(Departmentモデルのリスト)である MainWindowViewModel.Departments をグリッド表示する。-->
                <TextBlock Text="部署" FontSize="15" Canvas.Left="170" Canvas.Top="190"/>
                <DataGrid ItemsSource="{Binding Departments}" IsReadOnly="True" Height="150" Width="400"  AutoGenerateColumns="False"
                      CanUserAddRows="False" Canvas.Left="5" Canvas.Top="210" LoadingRow="DataGrid_LoadingRow">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Id" Binding="{Binding Id}" />
                        <DataGridTextColumn Header="名前" Binding="{Binding Name}" Width="145" />
                        <DataGridTextColumn Header="親部署" Binding="{Binding Parent.Name}"  Width="145" />
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <!-- CommandParameter に {Binding} とだけ記述すると、MainWindowViewModel.Departments の要素、つまり Department モデルを指定したことになる。-->
                                    <Button Content="編集" Command="{Binding DataContext.DepartmentEditCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Content="削除"   Foreground="#FFFFFF" Background="#FF0000" Command="{Binding DataContext.DepartmentDeleteCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

                <!--
                
                <TextBlock Text="メッセージ" FontSize="15" Canvas.Left="160" Canvas.Top="310"/>
                <DataGrid ItemsSource="{Binding Responsemessage}" IsReadOnly="True" Height="150" Width="400"  AutoGenerateColumns="False"
                      CanUserAddRows="False" Canvas.Left="5" Canvas.Top="330" LoadingRow="DataGrid_LoadingRow">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Id" Binding="{Binding Id}" />
                        <DataGridTextColumn Header="メッセージ" Binding="{Binding Message}" Width="300" />
                       
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                  
                                    <Button Content="編集" Command="{Binding DataContext.DepartmentEditCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Content="削除"   Foreground="#FFFFFF" Background="#FF0000" Command="{Binding DataContext.DepartmentDeleteCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
                -->
                
            </Canvas>
        </StackPanel>
       
    </Grid>
</Window>
